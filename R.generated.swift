//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `SFDisplay-Bold.otf`.
    static let sfDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Bold", pathExtension: "otf")
    /// Resource file `SFDisplay-Heavy.otf`.
    static let sfDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Heavy", pathExtension: "otf")
    /// Resource file `SFDisplay-Light.otf`.
    static let sfDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Light", pathExtension: "otf")
    /// Resource file `SFDisplay-Medium.otf`.
    static let sfDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Medium", pathExtension: "otf")
    /// Resource file `SFDisplay-Regular.otf`.
    static let sfDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Regular", pathExtension: "otf")
    /// Resource file `SFDisplay-Semibold.otf`.
    static let sfDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Semibold", pathExtension: "otf")
    /// Resource file `SFDisplay-Thin.otf`.
    static let sfDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFDisplay-Thin", pathExtension: "otf")
    
    /// `bundle.url(forResource: "SFDisplay-Bold", withExtension: "otf")`
    static func sfDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFDisplay-Heavy", withExtension: "otf")`
    static func sfDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFDisplay-Light", withExtension: "otf")`
    static func sfDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFDisplay-Medium", withExtension: "otf")`
    static func sfDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFDisplay-Regular", withExtension: "otf")`
    static func sfDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFDisplay-Semibold", withExtension: "otf")`
    static func sfDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFDisplay-Thin", withExtension: "otf")`
    static func sfDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFUIDisplay-Bold`.
    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Heavy`.
    static let sfuiDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
    /// Font `SFUIDisplay-Semibold`.
    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIDisplay-Thin`.
    static let sfuiDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
    
    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
    static func sfuiDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayHeavy, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
    static func sfuiDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayThin, size: size)
    }
    
    static func validate() throws {
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SFDisplay-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'SFDisplay-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'SFDisplay-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'SFDisplay-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'SFDisplay-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'SFDisplay-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'SFDisplay-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `add_ic`.
    static let add_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_ic")
    /// Image `back_ic`.
    static let back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_ic")
    /// Image `bankstatement_bg`.
    static let bankstatement_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bankstatement_bg")
    /// Image `bankstatement_ic`.
    static let bankstatement_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "bankstatement_ic")
    /// Image `disclosure_ic`.
    static let disclosure_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "disclosure_ic")
    /// Image `dummy_bg1`.
    static let dummy_bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_bg1")
    /// Image `dummy_bg2`.
    static let dummy_bg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_bg2")
    /// Image `dummy_bg3`.
    static let dummy_bg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_bg3")
    /// Image `dummy_bg4`.
    static let dummy_bg4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_bg4")
    /// Image `form_bg`.
    static let form_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "form_bg")
    /// Image `forms_ic`.
    static let forms_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "forms_ic")
    /// Image `images_bg`.
    static let images_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "images_bg")
    /// Image `images_ic`.
    static let images_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "images_ic")
    /// Image `menu_ic`.
    static let menu_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_ic")
    /// Image `more_1_ic`.
    static let more_1_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_1_ic")
    /// Image `more_ic`.
    static let more_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_ic")
    /// Image `mydocuments_bg`.
    static let mydocuments_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mydocuments_bg")
    /// Image `mydocuments_ic`.
    static let mydocuments_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "mydocuments_ic")
    /// Image `otherdocuments_bg`.
    static let otherdocuments_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "otherdocuments_bg")
    /// Image `otherdocuments_ic`.
    static let otherdocuments_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "otherdocuments_ic")
    /// Image `repository_bg`.
    static let repository_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "repository_bg")
    /// Image `search_ic`.
    static let search_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_ic")
    /// Image `sort_ic`.
    static let sort_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort_ic")
    
    /// `UIImage(named: "add_ic", bundle: ..., traitCollection: ...)`
    static func add_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_ic", bundle: ..., traitCollection: ...)`
    static func back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bankstatement_bg", bundle: ..., traitCollection: ...)`
    static func bankstatement_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankstatement_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bankstatement_ic", bundle: ..., traitCollection: ...)`
    static func bankstatement_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankstatement_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "disclosure_ic", bundle: ..., traitCollection: ...)`
    static func disclosure_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disclosure_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dummy_bg1", bundle: ..., traitCollection: ...)`
    static func dummy_bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_bg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dummy_bg2", bundle: ..., traitCollection: ...)`
    static func dummy_bg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_bg2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dummy_bg3", bundle: ..., traitCollection: ...)`
    static func dummy_bg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_bg3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dummy_bg4", bundle: ..., traitCollection: ...)`
    static func dummy_bg4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_bg4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "form_bg", bundle: ..., traitCollection: ...)`
    static func form_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.form_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forms_ic", bundle: ..., traitCollection: ...)`
    static func forms_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forms_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "images_bg", bundle: ..., traitCollection: ...)`
    static func images_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.images_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "images_ic", bundle: ..., traitCollection: ...)`
    static func images_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.images_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_ic", bundle: ..., traitCollection: ...)`
    static func menu_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_1_ic", bundle: ..., traitCollection: ...)`
    static func more_1_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_1_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_ic", bundle: ..., traitCollection: ...)`
    static func more_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mydocuments_bg", bundle: ..., traitCollection: ...)`
    static func mydocuments_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mydocuments_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mydocuments_ic", bundle: ..., traitCollection: ...)`
    static func mydocuments_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mydocuments_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "otherdocuments_bg", bundle: ..., traitCollection: ...)`
    static func otherdocuments_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.otherdocuments_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "otherdocuments_ic", bundle: ..., traitCollection: ...)`
    static func otherdocuments_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.otherdocuments_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "repository_bg", bundle: ..., traitCollection: ...)`
    static func repository_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.repository_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_ic", bundle: ..., traitCollection: ...)`
    static func search_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sort_ic", bundle: ..., traitCollection: ...)`
    static func sort_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort_ic, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `UserListTableViewCell`.
    static let userListTableViewCell: Rswift.ReuseIdentifier<UserListTableViewCell> = Rswift.ReuseIdentifier(identifier: "UserListTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")
      let userDetailViewController = StoryboardViewControllerResource<UserDetailViewController>(identifier: "UserDetailViewController")
      let userListViewController = StoryboardViewControllerResource<UserListViewController>(identifier: "UserListViewController")
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }
      
      func userDetailViewController(_: Void = ()) -> UserDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userDetailViewController)
      }
      
      func userListViewController(_: Void = ()) -> UserListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userListViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().userDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userDetailViewController' could not be loaded from storyboard 'Main' as 'UserDetailViewController'.") }
        if _R.storyboard.main().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Main' as 'SignupViewController'.") }
        if _R.storyboard.main().userListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userListViewController' could not be loaded from storyboard 'Main' as 'UserListViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
